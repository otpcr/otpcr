#!/usr/bin/env python3
# This file is placed in the Public Domain.
# pylint: disable=C,R0903,W0105,W0201,W0212,W0603,W0613,W0718,E0401


"tinder"


import os
import shutil
import sys
import termios
import time
import _thread


sys.path.insert(0, os.getcwd())


from otpcr.client  import Buffered, Client
from otpcr.command import Commands, parse, scan
from otpcr.default import Config
from otpcr.error   import errors, later
from otpcr.event   import Event
from otpcr.find    import Workdir, fntime, laps, skel
from otpcr.modules import face
from otpcr.object  import Object
from otpcr.thread  import launch


Workdir.name = "tinder"
Workdir.wdr = ".test"


cfg = Config()
cfg.index = 0


lap = 1
nrs = 1
nrcommand = 1
percall   = 1
starttime = time.time()


events = []
paylock = _thread.allocate_lock()


param = Object()
param.cmd = [""]
param.dne = ["mekker", ""]
param.dpl = ["hnrss title,url", ""]
param.exp = ['']
param.fnd = ["log", "todo", "rss", "config", "urls", ""]
param.imp = ["tests/feeds.opml", ""]
param.log = ["bla", ""]
param.mod = [""]
param.mre = [""]
param.nme = ["hnrss hackernews", ""]
param.pwd = ["bla mekker", ""]
param.rem = ["hnrss", ""]
param.res = ["hnrss"]
param.rss = ["http://hnrss.org/newest", ""]
param.srv = [""]
param.tdo = ["mekker", ""]
param.thr = [""]
param.ver = [""]


class CLI(Buffered):

    def raw(self, txt):
        if "v" in cfg.opts:
            print(txt)
            sys.stdout.flush()


def banner():
    tme = time.ctime(time.time()).replace("  ", " ")
    print(f"{Workdir.name.upper()} since {tme}")


def consume(evts):
    done = []
    for evt in sorted(evts, key=lambda x: x.ctime):
        evt.wait()
        done.append(evt)
    for todo in done:
        events.remove(todo)
    return done


def payload(clt):
    nmr = 0
    for cmdd in sorted(Commands.cmds):
        for ex in getattr(param, cmdd, [""]):
            evt = Event()
            evt.txt = cmdd + " " + ex
            evt.type = "command"
            events.append(evt)
            clt.put(evt)
            nmr += 1
    return nmr


def wrap(function):
    old3 = None
    try:
        old3 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        function()
    except (KeyboardInterrupt, EOFError):
        pass
    except Exception as ex:
        later(ex)
    finally:
        if old3:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old3)


def main():
    global nrs
    global nrcommand
    parse(cfg, " ".join(sys.argv[1:]))
    face.rss.DEBUG = True
    scan(face)
    nrcommand = len(Commands.cmds) or 1
    if "v" in cfg.opts:
        banner()
        print("verbose is on")
    if "f" not in cfg.opts:
        if os.path.exists(Workdir.wdr):
            shutil.rmtree(Workdir.wdr)
    skel()
    clt = CLI()
    clt.start()
    nrs = cfg.index or 1
    thrs = []
    for _nr in range(nrs):
        thrs.append(launch(payload, clt))
    for thr in thrs:
        thr.join()
    consume(events)
    clt.stop()
    clt.wait()


if __name__ == "__main__":
    wrap(main)
    endtime = time.time()
    lap = laps(endtime-starttime)
    percall = (endtime-starttime)/(nrs*nrcommand)
    for line in errors():
        print(line)
    if "v" in cfg.opts:
        if not list(errors()):
            print("no errors")
        if events:
            print(f"{len(events)} events")
        print(f"{lap} {nrs} {nrcommand} {percall}")
    sys.stdout.flush()
